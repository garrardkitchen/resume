<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Api Gateway on GPK</title>
    <link>http://localhost:1313/tags/api-gateway/</link>
    <description>Recent content in Api Gateway on GPK</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Apr 2020 11:14:39 +0100</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/api-gateway/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Corporate Website</title>
      <link>http://localhost:1313/projects/creations/corporate-website/</link>
      <pubDate>Sun, 28 Apr 2019 17:31:27 +0100</pubDate>
      <guid>http://localhost:1313/projects/creations/corporate-website/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;Used mainly static content and ported new copy/layout to SAM Serverless Application C# .NET Core Razor Pages solution. Originally WP was in place, so removing MySQL reduced the cost. I created a CI/CD Pipeline using BitBucket.  It is now hosted via API Gateway &amp;amp; Lambda and not via an Azure Website.&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>IntelliSearch</title>
      <link>http://localhost:1313/projects/creations/intellisearch/</link>
      <pubDate>Sun, 28 Apr 2019 17:22:33 +0100</pubDate>
      <guid>http://localhost:1313/projects/creations/intellisearch/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Coach has a long standing feature called IntelliSearch.&lt;/p&gt;&#xA;&lt;p&gt;It is a feature that, at a specific time, for several set periods [daily, weekly, monthly, custom], it will submit queries to a Data Connector (conduit between our system and an external system) to match up randomly selected recordings for later evaluation.  The random algorithm implemented is there to ensure fairness of recording selection so apples and apples are compared and not apples to oranges.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Migrations</title>
      <link>http://localhost:1313/projects/creations/migrations/</link>
      <pubDate>Sun, 28 Apr 2019 17:16:53 +0100</pubDate>
      <guid>http://localhost:1313/projects/creations/migrations/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Migrate Coach product away from a monolyth to being 100% serverless.  Main web platform hosted via ECS Fargate and all features, RESTul APIs be Lambda backed API Gateways and Step Functions.  Data repositories used are dynamoDB, ElasticSearch, Amazon Aurora (mySQL), Redis and S3.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Coach migrated from MSSQL to MySQL as costs were too high for Always-On capabilities. I was accepted onto Aurora MySQL Preview programme and contributed to this phase.  The product had a key dependency that required a specific version of MySQL. As a result we are now using Amazon Aurora and plan to migrate over to  Aurora Serverless when version 5.7 is supported.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CXcoach</title>
      <link>http://localhost:1313/projects/creations/cxcoach/</link>
      <pubDate>Sun, 28 Apr 2019 16:16:41 +0100</pubDate>
      <guid>http://localhost:1313/projects/creations/cxcoach/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Created an SaaS version of our product on the AWS platform using serverless tech as an enabler to lowering the running costs and as such, make it cheaper for the vendor/partner to offer our product to their end-clients&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;I have been responsible for driving the integrations with major vendors&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Made presentations to prospective partners [CEO and below] nd helped shape requirements of the integration&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Platform required a new set of UX principles&lt;/p&gt;</description>
    </item>
    <item>
      <title>Serverless</title>
      <link>http://localhost:1313/projects/creations/serverless/</link>
      <pubDate>Sun, 28 Apr 2019 16:01:53 +0100</pubDate>
      <guid>http://localhost:1313/projects/creations/serverless/</guid>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Investigated ways to reduce time to market, end-client license costs, hosting costs and development costs.&lt;/p&gt;&#xA;&lt;p&gt;This research and later development efforts contributed to formulating and maintaining a best practice set of guidelines/principals covering all frameworks and languages employed to deliver a solution [product, automation and integrations].&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;Used both Serverless Framework and SAM.  I use several IDEs, dependant on task/requirement, mainly VSCode, Rider, PyCharm and VS.&lt;/p&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;These are samples of use cases where I have employed Serverless technologies: Websites (ASP.NET Core Razor), major features (utilising full AWS stack), automation (set log retention via CLoudWatch Events, set Log subscription, Set API Gateway Key and store in SSM).&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
