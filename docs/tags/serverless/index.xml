<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>serverless on GPK</title>
    <link>https://www.garrardkitchen.com/tags/serverless/</link>
    <description>Recent content in serverless on GPK</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 28 Apr 2019 17:31:27 +0100</lastBuildDate>
    
	<atom:link href="https://www.garrardkitchen.com/tags/serverless/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Corporate Website</title>
      <link>https://www.garrardkitchen.com/projects/creations/corporate-website/</link>
      <pubDate>Sun, 28 Apr 2019 17:31:27 +0100</pubDate>
      
      <guid>https://www.garrardkitchen.com/projects/creations/corporate-website/</guid>
      <description> Used mainly static content and ported new copy/layout to SAM Serverless Application C# .NET Core Razor Pages solution. Originally WP was in place, so removing MySQL reduced the cost. I created a CI/CD Pipeline using BitBucket. It is now hosted via API Gateway &amp;amp; Lambda and not via an Azure Website.  </description>
    </item>
    
    <item>
      <title>Automation</title>
      <link>https://www.garrardkitchen.com/projects/creations/automation/</link>
      <pubDate>Sun, 28 Apr 2019 17:20:51 +0100</pubDate>
      
      <guid>https://www.garrardkitchen.com/projects/creations/automation/</guid>
      <description> Serverless is ideal for so many use cases. Automation is a prime example of where serverless technology can fit so well. I have used Lambdas and supporting services to help automating both mundane and configuration tasks.
Some examples of these are; setting log retention durations on log group creations, log subscription and adding API Gateway API keys to SSM Parameter Store.  </description>
    </item>
    
    <item>
      <title>Migrations</title>
      <link>https://www.garrardkitchen.com/projects/creations/migrations/</link>
      <pubDate>Sun, 28 Apr 2019 17:16:53 +0100</pubDate>
      
      <guid>https://www.garrardkitchen.com/projects/creations/migrations/</guid>
      <description>Migrate Coach product away from a monolyth to being 100% serverless. Main web platform hosted via ECS Fargate and all features, RESTul APIs be Lambda backed API Gateways and Step Functions. Data repositories used are dynamoDB, ElasticSearch, Amazon Aurora (mySQL), Redis and S3.
  Coach migrated from MSSQL to MySQL as costs were too high for Always-On capabilities. I was accepted onto Aurora MySQL Preview programme and contributed to this phase.</description>
    </item>
    
    <item>
      <title>Observability</title>
      <link>https://www.garrardkitchen.com/projects/creations/observability/</link>
      <pubDate>Sun, 28 Apr 2019 16:24:21 +0100</pubDate>
      
      <guid>https://www.garrardkitchen.com/projects/creations/observability/</guid>
      <description>The 3 pillars of observability (logging, metrics and tracing) presents new challenges for serverless solutions.
Having experienced this first hand, I set about looking for a solution that will enable rapid root cause analysis to ultimately greatly reduce or even better, mitigate [think runbooks] known undesirable scenarios.
  I believe in positive Customer Experience (CX) and apply this philosophy across everything I do.
I spent time with Datadog [a few months of meetings] discussing ways to help this serverless space to improve observability.</description>
    </item>
    
    <item>
      <title>Serverless</title>
      <link>https://www.garrardkitchen.com/projects/creations/serverless/</link>
      <pubDate>Sun, 28 Apr 2019 16:01:53 +0100</pubDate>
      
      <guid>https://www.garrardkitchen.com/projects/creations/serverless/</guid>
      <description>Investigated ways to reduce time to market, end-client license costs, hosting costs and development costs.
This research and later development efforts contributed to formulating and maintaining a best practice set of guidelines/principals covering all frameworks and languages employed to deliver a solution [product, automation and integrations].
  Used both Serverless Framework and SAM. I use several IDEs, dependant on task/requirement, mainly VSCode, Rider, PyCharm and VS.
  These are samples of use cases where I have employed Serverless technologies: Websites (ASP.</description>
    </item>
    
  </channel>
</rss>